"""
    Geocoding and Search API v7

    This document describes the Geocoding and Search API.  # noqa: E501

    The version of the OpenAPI document: 7.74
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from geocoding.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from geocoding.exceptions import ApiAttributeError



class FieldScore(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'country': (float,),  # noqa: E501
            'country_code': (float,),  # noqa: E501
            'state': (float,),  # noqa: E501
            'state_code': (float,),  # noqa: E501
            'county': (float,),  # noqa: E501
            'county_code': (float,),  # noqa: E501
            'city': (float,),  # noqa: E501
            'district': (float,),  # noqa: E501
            'subdistrict': (float,),  # noqa: E501
            'streets': ([float],),  # noqa: E501
            'block': (float,),  # noqa: E501
            'subblock': (float,),  # noqa: E501
            'house_number': (float,),  # noqa: E501
            'postal_code': (float,),  # noqa: E501
            'building': (float,),  # noqa: E501
            'unit': (float,),  # noqa: E501
            'place_name': (float,),  # noqa: E501
            'ontology_name': (float,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'country': 'country',  # noqa: E501
        'country_code': 'countryCode',  # noqa: E501
        'state': 'state',  # noqa: E501
        'state_code': 'stateCode',  # noqa: E501
        'county': 'county',  # noqa: E501
        'county_code': 'countyCode',  # noqa: E501
        'city': 'city',  # noqa: E501
        'district': 'district',  # noqa: E501
        'subdistrict': 'subdistrict',  # noqa: E501
        'streets': 'streets',  # noqa: E501
        'block': 'block',  # noqa: E501
        'subblock': 'subblock',  # noqa: E501
        'house_number': 'houseNumber',  # noqa: E501
        'postal_code': 'postalCode',  # noqa: E501
        'building': 'building',  # noqa: E501
        'unit': 'unit',  # noqa: E501
        'place_name': 'placeName',  # noqa: E501
        'ontology_name': 'ontologyName',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """FieldScore - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            country (float): Indicates how good the result country name or [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.. [optional]  # noqa: E501
            country_code (float): Indicates how good the result [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.. [optional]  # noqa: E501
            state (float): Indicates how good the result state name matches to the freeform or qualified input.. [optional]  # noqa: E501
            state_code (float): Indicates how good the result state code matches to the freeform or qualified input.. [optional]  # noqa: E501
            county (float): Indicates how good the result county name matches to the freeform or qualified input.. [optional]  # noqa: E501
            county_code (float): Indicates how good the result county code matches to the freeform or qualified input.. [optional]  # noqa: E501
            city (float): Indicates how good the result city name matches to the freeform or qualified input.. [optional]  # noqa: E501
            district (float): Indicates how good the result district name matches to the freeform or qualified input.. [optional]  # noqa: E501
            subdistrict (float): Indicates how good the result sub-district name matches to the freeform or qualified input.. [optional]  # noqa: E501
            streets ([float]): Indicates how good the result street names match to the freeform or qualified input. If the input contains multiple street names, the field score is calculated and returned for each of them individually.. [optional]  # noqa: E501
            block (float): Indicates how good the result block name matches to the freeform or qualified input.. [optional]  # noqa: E501
            subblock (float): Indicates how good the result sub-block name matches to the freeform or qualified input.. [optional]  # noqa: E501
            house_number (float): Indicates how good the result house number matches to the freeform or qualified input. It may happen, that the house number, which one is looking for, is not yet in the map data. For such cases, the /geocode returns the nearest known house number on the same street. This represents the numeric difference between the requested and the returned house numbers.. [optional]  # noqa: E501
            postal_code (float): Indicates how good the result postal code matches to the freeform or qualified input.. [optional]  # noqa: E501
            building (float): Indicates how good the result building name matches to the freeform or qualified input.. [optional]  # noqa: E501
            unit (float): Indicates how good the result unit (such as a micro point address) matches to the freeform or qualified input.. [optional]  # noqa: E501
            place_name (float): Indicates how good the result place name matches to the freeform or qualified input.. [optional]  # noqa: E501
            ontology_name (float): Indicates how good the result ontology name matches to the freeform or qualified input.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """FieldScore - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            country (float): Indicates how good the result country name or [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.. [optional]  # noqa: E501
            country_code (float): Indicates how good the result [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.. [optional]  # noqa: E501
            state (float): Indicates how good the result state name matches to the freeform or qualified input.. [optional]  # noqa: E501
            state_code (float): Indicates how good the result state code matches to the freeform or qualified input.. [optional]  # noqa: E501
            county (float): Indicates how good the result county name matches to the freeform or qualified input.. [optional]  # noqa: E501
            county_code (float): Indicates how good the result county code matches to the freeform or qualified input.. [optional]  # noqa: E501
            city (float): Indicates how good the result city name matches to the freeform or qualified input.. [optional]  # noqa: E501
            district (float): Indicates how good the result district name matches to the freeform or qualified input.. [optional]  # noqa: E501
            subdistrict (float): Indicates how good the result sub-district name matches to the freeform or qualified input.. [optional]  # noqa: E501
            streets ([float]): Indicates how good the result street names match to the freeform or qualified input. If the input contains multiple street names, the field score is calculated and returned for each of them individually.. [optional]  # noqa: E501
            block (float): Indicates how good the result block name matches to the freeform or qualified input.. [optional]  # noqa: E501
            subblock (float): Indicates how good the result sub-block name matches to the freeform or qualified input.. [optional]  # noqa: E501
            house_number (float): Indicates how good the result house number matches to the freeform or qualified input. It may happen, that the house number, which one is looking for, is not yet in the map data. For such cases, the /geocode returns the nearest known house number on the same street. This represents the numeric difference between the requested and the returned house numbers.. [optional]  # noqa: E501
            postal_code (float): Indicates how good the result postal code matches to the freeform or qualified input.. [optional]  # noqa: E501
            building (float): Indicates how good the result building name matches to the freeform or qualified input.. [optional]  # noqa: E501
            unit (float): Indicates how good the result unit (such as a micro point address) matches to the freeform or qualified input.. [optional]  # noqa: E501
            place_name (float): Indicates how good the result place name matches to the freeform or qualified input.. [optional]  # noqa: E501
            ontology_name (float): Indicates how good the result ontology name matches to the freeform or qualified input.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
