"""
    Geocoding and Search API v7

    This document describes the Geocoding and Search API.  # noqa: E501

    The version of the OpenAPI document: 7.74
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from geocoding.api_client import ApiClient, Endpoint as _Endpoint
from geocoding.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from geocoding.model.error_response import ErrorResponse
from geocoding.model.lookup_response import LookupResponse
from geocoding.model.open_search_autocomplete_response import OpenSearchAutocompleteResponse
from geocoding.model.open_search_autosuggest_response import OpenSearchAutosuggestResponse
from geocoding.model.open_search_browse_response import OpenSearchBrowseResponse
from geocoding.model.open_search_geocode_response import OpenSearchGeocodeResponse
from geocoding.model.open_search_reverse_geocode_response import OpenSearchReverseGeocodeResponse
from geocoding.model.open_search_search_response import OpenSearchSearchResponse


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.autocomplete_get_endpoint = _Endpoint(
            settings={
                'response_type': (OpenSearchAutocompleteResponse,),
                'auth': [
                    'ApiKey',
                    'Bearer'
                ],
                'endpoint_path': '/autocomplete',
                'operation_id': 'autocomplete_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://autocomplete.search.hereapi.com/v1",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'q',
                    'at',
                    '_in',
                    'limit',
                    'types',
                    'lang',
                    'political_view',
                    'show',
                    'x_request_id',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                    'types',
                    'show',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 20,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('types',): {

                        "AREA": "area",
                        "CITY": "city",
                        "POSTALCODE": "postalCode"
                    },
                    ('show',): {

                        "STREETINFO": "streetInfo"
                    },
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'at':
                        (str,),
                    '_in':
                        (str,),
                    'limit':
                        (int,),
                    'types':
                        ([str],),
                    'lang':
                        ([str],),
                    'political_view':
                        (str,),
                    'show':
                        ([str],),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                    'at': 'at',
                    '_in': 'in',
                    'limit': 'limit',
                    'types': 'types',
                    'lang': 'lang',
                    'political_view': 'politicalView',
                    'show': 'show',
                    'x_request_id': 'X-Request-ID',
                },
                'location_map': {
                    'q': 'query',
                    'at': 'query',
                    '_in': 'query',
                    'limit': 'query',
                    'types': 'query',
                    'lang': 'query',
                    'political_view': 'query',
                    'show': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                    'types': 'csv',
                    'lang': 'csv',
                    'show': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.autosuggest_get_endpoint = _Endpoint(
            settings={
                'response_type': (OpenSearchAutosuggestResponse,),
                'auth': [
                    'ApiKey',
                    'Bearer'
                ],
                'endpoint_path': '/autosuggest',
                'operation_id': 'autosuggest_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://autosuggest.search.hereapi.com/v1",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'q',
                    'at',
                    '_in',
                    'limit',
                    'route',
                    'terms_limit',
                    'lang',
                    'political_view',
                    'show',
                    'x_request_id',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                    'show',
                ],
                'validation': [
                    'limit',
                    'terms_limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                    ('terms_limit',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('show',): {

                        "PHONEMES": "phonemes",
                        "STREETINFO": "streetInfo",
                        "TZ": "tz"
                    },
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'at':
                        (str,),
                    '_in':
                        (str,),
                    'limit':
                        (int,),
                    'route':
                        (str,),
                    'terms_limit':
                        (int,),
                    'lang':
                        ([str],),
                    'political_view':
                        (str,),
                    'show':
                        ([str],),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                    'at': 'at',
                    '_in': 'in',
                    'limit': 'limit',
                    'route': 'route',
                    'terms_limit': 'termsLimit',
                    'lang': 'lang',
                    'political_view': 'politicalView',
                    'show': 'show',
                    'x_request_id': 'X-Request-ID',
                },
                'location_map': {
                    'q': 'query',
                    'at': 'query',
                    '_in': 'query',
                    'limit': 'query',
                    'route': 'query',
                    'terms_limit': 'query',
                    'lang': 'query',
                    'political_view': 'query',
                    'show': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                    'lang': 'csv',
                    'show': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.browse_get_endpoint = _Endpoint(
            settings={
                'response_type': (OpenSearchBrowseResponse,),
                'auth': [
                    'ApiKey',
                    'Bearer'
                ],
                'endpoint_path': '/browse',
                'operation_id': 'browse_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://browse.search.hereapi.com/v1",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'at',
                    'categories',
                    'chains',
                    'food_types',
                    '_in',
                    'limit',
                    'name',
                    'route',
                    'lang',
                    'political_view',
                    'show',
                    'x_request_id',
                ],
                'required': [
                    'at',
                ],
                'nullable': [
                ],
                'enum': [
                    'show',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('show',): {

                        "PHONEMES": "phonemes",
                        "STREETINFO": "streetInfo",
                        "TZ": "tz"
                    },
                },
                'openapi_types': {
                    'at':
                        (str,),
                    'categories':
                        ([str],),
                    'chains':
                        ([str],),
                    'food_types':
                        ([str],),
                    '_in':
                        (str,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'route':
                        (str,),
                    'lang':
                        ([str],),
                    'political_view':
                        (str,),
                    'show':
                        ([str],),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'at': 'at',
                    'categories': 'categories',
                    'chains': 'chains',
                    'food_types': 'foodTypes',
                    '_in': 'in',
                    'limit': 'limit',
                    'name': 'name',
                    'route': 'route',
                    'lang': 'lang',
                    'political_view': 'politicalView',
                    'show': 'show',
                    'x_request_id': 'X-Request-ID',
                },
                'location_map': {
                    'at': 'query',
                    'categories': 'query',
                    'chains': 'query',
                    'food_types': 'query',
                    '_in': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'route': 'query',
                    'lang': 'query',
                    'political_view': 'query',
                    'show': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                    'categories': 'csv',
                    'chains': 'csv',
                    'food_types': 'csv',
                    'lang': 'csv',
                    'show': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discover_get_endpoint = _Endpoint(
            settings={
                'response_type': (OpenSearchSearchResponse,),
                'auth': [
                    'ApiKey',
                    'Bearer'
                ],
                'endpoint_path': '/discover',
                'operation_id': 'discover_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://discover.search.hereapi.com/v1",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'q',
                    'at',
                    '_in',
                    'limit',
                    'route',
                    'lang',
                    'political_view',
                    'show',
                    'x_request_id',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                    'show',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('show',): {

                        "PHONEMES": "phonemes",
                        "STREETINFO": "streetInfo",
                        "TZ": "tz"
                    },
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'at':
                        (str,),
                    '_in':
                        (str,),
                    'limit':
                        (int,),
                    'route':
                        (str,),
                    'lang':
                        ([str],),
                    'political_view':
                        (str,),
                    'show':
                        ([str],),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                    'at': 'at',
                    '_in': 'in',
                    'limit': 'limit',
                    'route': 'route',
                    'lang': 'lang',
                    'political_view': 'politicalView',
                    'show': 'show',
                    'x_request_id': 'X-Request-ID',
                },
                'location_map': {
                    'q': 'query',
                    'at': 'query',
                    '_in': 'query',
                    'limit': 'query',
                    'route': 'query',
                    'lang': 'query',
                    'political_view': 'query',
                    'show': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                    'lang': 'csv',
                    'show': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geocode_get_endpoint = _Endpoint(
            settings={
                'response_type': (OpenSearchGeocodeResponse,),
                'auth': [
                    'ApiKey',
                    'Bearer'
                ],
                'endpoint_path': '/geocode',
                'operation_id': 'geocode_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://geocode.search.hereapi.com/v1",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'at',
                    '_in',
                    'limit',
                    'q',
                    'qq',
                    'lang',
                    'political_view',
                    'show',
                    'x_request_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'show',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('show',): {

                        "COUNTRYINFO": "countryInfo",
                        "STREETINFO": "streetInfo",
                        "PARSING": "parsing",
                        "TZ": "tz"
                    },
                },
                'openapi_types': {
                    'at':
                        (str,),
                    '_in':
                        (str,),
                    'limit':
                        (int,),
                    'q':
                        (str,),
                    'qq':
                        (str,),
                    'lang':
                        ([str],),
                    'political_view':
                        (str,),
                    'show':
                        ([str],),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'at': 'at',
                    '_in': 'in',
                    'limit': 'limit',
                    'q': 'q',
                    'qq': 'qq',
                    'lang': 'lang',
                    'political_view': 'politicalView',
                    'show': 'show',
                    'x_request_id': 'X-Request-ID',
                },
                'location_map': {
                    'at': 'query',
                    '_in': 'query',
                    'limit': 'query',
                    'q': 'query',
                    'qq': 'query',
                    'lang': 'query',
                    'political_view': 'query',
                    'show': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                    'lang': 'csv',
                    'show': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lookup_get_endpoint = _Endpoint(
            settings={
                'response_type': (LookupResponse,),
                'auth': [
                    'ApiKey',
                    'Bearer'
                ],
                'endpoint_path': '/lookup',
                'operation_id': 'lookup_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://lookup.search.hereapi.com/v1",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'id',
                    'lang',
                    'political_view',
                    'show',
                    'x_request_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'show',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('show',): {

                        "COUNTRYINFO": "countryInfo",
                        "PHONEMES": "phonemes",
                        "STREETINFO": "streetInfo",
                        "TZ": "tz"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'lang':
                        ([str],),
                    'political_view':
                        (str,),
                    'show':
                        ([str],),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'lang': 'lang',
                    'political_view': 'politicalView',
                    'show': 'show',
                    'x_request_id': 'X-Request-ID',
                },
                'location_map': {
                    'id': 'query',
                    'lang': 'query',
                    'political_view': 'query',
                    'show': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                    'lang': 'csv',
                    'show': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.revgeocode_get_endpoint = _Endpoint(
            settings={
                'response_type': (OpenSearchReverseGeocodeResponse,),
                'auth': [
                    'ApiKey',
                    'Bearer'
                ],
                'endpoint_path': '/revgeocode',
                'operation_id': 'revgeocode_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://revgeocode.search.hereapi.com/v1",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'at',
                    '_in',
                    'limit',
                    'lang',
                    'political_view',
                    'show',
                    'x_request_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'show',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('show',): {

                        "COUNTRYINFO": "countryInfo",
                        "STREETINFO": "streetInfo",
                        "TZ": "tz"
                    },
                },
                'openapi_types': {
                    'at':
                        (str,),
                    '_in':
                        (str,),
                    'limit':
                        (int,),
                    'lang':
                        ([str],),
                    'political_view':
                        (str,),
                    'show':
                        ([str],),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'at': 'at',
                    '_in': 'in',
                    'limit': 'limit',
                    'lang': 'lang',
                    'political_view': 'politicalView',
                    'show': 'show',
                    'x_request_id': 'X-Request-ID',
                },
                'location_map': {
                    'at': 'query',
                    '_in': 'query',
                    'limit': 'query',
                    'lang': 'query',
                    'political_view': 'query',
                    'show': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                    'lang': 'csv',
                    'show': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def autocomplete_get(
        self,
        q,
        **kwargs
    ):
        """Autocomplete  # noqa: E501

        BETA: This endpoint completes the few entered keystrokes to the valid street address or administrative area to speed-up entering the address queries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.autocomplete_get(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): Enter a free-text query  Examples:  * `ber`, `berl`, `berli`, ...  * `berlin+p`, `berlin+paris`, `berlin+parise`, ...  * `berlin+pariser+20`   _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results._ 

        Keyword Args:
            at (str): Specify the center of the search context expressed as coordinates.  Format: `{latitude},{longitude}`  Type: `{decimal},{decimal}`  Example: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru) . [optional]
            _in (str): Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.  A geographic area can be   * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes     The country codes are to be provided in all uppercase.     Format: `countryCode:{countryCode}[,{countryCode}]*`     Examples:     * `countryCode:USA`     * `countryCode:CAN,MEX,USA`  . [optional]
            limit (int): Maximum number of results to be returned.. [optional] if omitted the server will use the default value of 5
            types ([str]): BETA: Limit the result items to the specified types. Currently supported values of the type filter for Autocomplete:  * `city` - restricting results to result type `locality` and locality type `city`  * `postalCode` - restricting results to result type `locality` and locality type `postalCode`,  * `area` - restricting results to result types: `locality` or `administrativeArea` including all the sub-types  Provide one of the supported values or a comma separated list.. [optional]
            lang ([str]): Select the preferred response language for result rendering from a list of BCP47 compliant Language Codes. The autocomplete endpoint tries to detect the query language based on matching name variants and then chooses the same language for the response.  Therefore the end-user can see and recognize all the entered terms in the same language as in the query. The specified preferred language is used only for not matched address tokens and for matched address tokens in case of ambiguity . [optional]
            political_view (str): Toggle the political view.  This parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.  Currently the only supported political views are:  * RUS expressing the Russian view on Crimea  * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands  * MAR expressing the Moroccan view on Western Sahara  * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters  * KEN Kenya view on Ilemi Triangle  * TZA Tanzania view on Lake Malawi  * URY Uruguay view on Rincon de Artigas  For any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.  For not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.. [optional]
            show ([str]): Select additional fields to be rendered in the response. Please note that some of the fields involve additional webservice calls and can increase the overall response time.  The value is a comma-separated list of the sections to be enabled. For some sections there is a long and a short ID.  Description of accepted values:  'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.. [optional]
            x_request_id (str): Used to correlate requests with their responses within a customer's application, for logging and error reporting.  Format: Free string, but a valid UUIDv4 is recommended.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OpenSearchAutocompleteResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['q'] = \
            q
        return self.autocomplete_get_endpoint.call_with_http_info(**kwargs)

    def autosuggest_get(
        self,
        q,
        **kwargs
    ):
        """Autosuggest  # noqa: E501

        This endpoint suggests address or place candidates based on an incomplete or misspelled query,  from which the user selects the best query to submit.  _NOTE: The response may contain **experimental** elements not documented here.  Any undocumented element is **subject to removal** at any time._   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.autosuggest_get(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): Enter a free-text query  Examples:  * `res`, `rest`, `resta`, `restau`, ...  * `berlin+bran`, `berlin+brand`, `berlin+branden`, ...  * `New+Yok+Giants`   _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results. 

        Keyword Args:
            at (str): Specify the center of the search context expressed as coordinates  Format: `{latitude},{longitude}`  Type: `{decimal},{decimal}`  Example: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)  The following constraints apply:   * One of \"at\", \"in=circle\" or \"in=bbox\" is required.   * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed. . [optional]
            _in (str): Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.  A geographic area can be   * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes     The country codes are to be provided in all uppercase.     Format: `countryCode:{countryCode}[,{countryCode}]*`     Examples:     * `countryCode:USA`     * `countryCode:CAN,MEX,USA`    * a circular area, provided as latitude, longitude, and radius (in meters)     Format: `circle:{latitude},{longitude};r={radius}`     Type: `circle:{decimal},{decimal};r={integer}`     Example: `circle:52.53,13.38;r=10000`    * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_     Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`     Example: `bbox:13.08836,52.33812,13.761,52.6755`   The following constraints apply:   * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.    * One of \"at\", \"in=circle\" or \"in=bbox\" is required.   * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\". . [optional]
            limit (int): Maximum number of results to be returned.. [optional] if omitted the server will use the default value of 20
            route (str): BETA: Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.  A `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),  followed by an optional width, represented by a sub-parameter \"w\".  Format: `{route};w={width}`  In regular expression syntax, the values of `route` look like:  `[a-zA-Z0-9_-]+(;w=\\d+)?`  \"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.  \"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.  Type: `{Flexible Polyline Encoding};w={integer}`  The following constraints apply:  * A `route` MUST NOT contain more than 2000 points.  Examples:  * `BFoz5xJ67i1B1B7PzIhaxL7Y`  * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`  * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`  Note: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:  ``` >>> import flexpolyline >>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC' >>> flexpolyline.decode(polyline) [(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0), (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0), (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)] ``` . [optional]
            terms_limit (int): Maximum number of Query Terms Suggestions to be returned.. [optional]
            lang ([str]): Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.. [optional]
            political_view (str): Toggle the political view.  This parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.  Currently the only supported political views are:  * RUS expressing the Russian view on Crimea  * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands  * MAR expressing the Moroccan view on Western Sahara  * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters  * KEN Kenya view on Ilemi Triangle  * TZA Tanzania view on Lake Malawi  * URY Uruguay view on Rincon de Artigas  For any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.  For not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.. [optional]
            show ([str]): Select additional fields to be rendered in the response. Please note that some of the fields involve additional webservice calls and can increase the overall response time.  The value is a comma-separated list of the sections to be enabled. For some sections there is a long and a short ID.  Description of accepted values:  'phonemes': Renders phonemes for address and place names into the results.  'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.  BETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.. [optional]
            x_request_id (str): Used to correlate requests with their responses within a customer's application, for logging and error reporting.  Format: Free string, but a valid UUIDv4 is recommended.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OpenSearchAutosuggestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['q'] = \
            q
        return self.autosuggest_get_endpoint.call_with_http_info(**kwargs)

    def browse_get(
        self,
        at,
        **kwargs
    ):
        """Browse  # noqa: E501

        This endpoint provides search results for places based on different filters, such as categories or name, ranked by distance from a given search center. The only mandatory elements exposed in the response are id and position. The other elements shown in the response samples section are only dataset attributes suggestions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.browse_get(at, async_req=True)
        >>> result = thread.get()

        Args:
            at (str): Specify the center of the search context expressed as coordinates  Required parameter for endpoints that are expected to rank results by distance from the explicitly  specified search center  Format: `{latitude},{longitude}`  Type: `{decimal},{decimal}`  Example: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru) 

        Keyword Args:
            categories ([str]): Category filter consisting of a comma-separated list of category-IDs for Categories defined in the HERE Places Category System, described in the Appendix to the HERE Search Developer Guide. Places with any assigned categories that match any of the requested categories are included in the response.  An exclamation mark \"`!`\" in front of a category ID causes that category to be excluded from the results. It is possible to mix excluded and included categories in the request - e.g. searching for places that are restaurants but not fast food restaurants. An exclusion will always win over an inclusion. . [optional]
            chains ([str]): Chain filter consisting of a comma-separated list of chain-IDs for Chains defined in the HERE Places Chain System, described in the Appendix to the HERE Search Developer Guide. Places with any assigned chains that match any of the requested chains are included in the response.  An exclamation mark \"`!`\" in front of a chain ID causes that chain to be excluded from the results. It is possible to mix excluded and included chains in the request - e.g. searching for places that are amazon but not wholefoods. An exclusion will always win over an inclusion. . [optional]
            food_types ([str]): FoodType filter consisting of a comma-separated list of cuisine-IDs for FoodTypes defined in the HERE Places Cuisine System, described in the Appendix to the HERE Search Developer Guide. Places with any assigned foodTypes that match any of the requested foodTypes are included in the response.  An exclamation mark \"`!`\" in front of a cuisine ID causes that foodType to be excluded from the results. It is possible to mix excluded and included foodTypes in the request - e.g. searching for places that serve italian but not chinese. An exclusion will always win over an inclusion. . [optional]
            _in (str): Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.  A geographic area can be   * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes     The country codes are to be provided in all uppercase.     Format: `countryCode:{countryCode}[,{countryCode}]*`     Examples:     * `countryCode:USA`     * `countryCode:CAN,MEX,USA`    * a circular area, provided as latitude, longitude, and radius (in meters)     Format: `circle:{latitude},{longitude};r={radius}`     Type: `circle:{decimal},{decimal};r={integer}`     Example: `circle:52.53,13.38;r=10000`    * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_     Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`     Example: `bbox:13.08836,52.33812,13.761,52.6755`   The following constraints apply:   * Parameters \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed. . [optional]
            limit (int): Maximum number of results to be returned.. [optional] if omitted the server will use the default value of 20
            name (str): Full-text filter on POI names/titles. Results with a partial match on the name parameter are included in the response.. [optional]
            route (str): BETA: Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.  A `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),  followed by an optional width, represented by a sub-parameter \"w\".  Format: `{route};w={width}`  In regular expression syntax, the values of `route` look like:  `[a-zA-Z0-9_-]+(;w=\\d+)?`  \"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.  \"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.  Type: `{Flexible Polyline Encoding};w={integer}`  The following constraints apply:  * A `route` MUST NOT contain more than 2000 points.  Examples:  * `BFoz5xJ67i1B1B7PzIhaxL7Y`  * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`  * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`  Note: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:  ``` >>> import flexpolyline >>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC' >>> flexpolyline.decode(polyline) [(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0), (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0), (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)] ``` . [optional]
            lang ([str]): Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.. [optional]
            political_view (str): Toggle the political view.  This parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.  Currently the only supported political views are:  * RUS expressing the Russian view on Crimea  * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands  * MAR expressing the Moroccan view on Western Sahara  * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters  * KEN Kenya view on Ilemi Triangle  * TZA Tanzania view on Lake Malawi  * URY Uruguay view on Rincon de Artigas  For any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.  For not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.. [optional]
            show ([str]): Select additional fields to be rendered in the response. Please note that some of the fields involve additional webservice calls and can increase the overall response time.  The value is a comma-separated list of the sections to be enabled. For some sections there is a long and a short ID.  Description of accepted values:  'phonemes': Renders phonemes for address and place names into the results.  'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.  BETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.. [optional]
            x_request_id (str): Used to correlate requests with their responses within a customer's application, for logging and error reporting.  Format: Free string, but a valid UUIDv4 is recommended.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OpenSearchBrowseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['at'] = \
            at
        return self.browse_get_endpoint.call_with_http_info(**kwargs)

    def discover_get(
        self,
        q,
        **kwargs
    ):
        """Discover  # noqa: E501

        This endpoint processes a free-form text query for an address or place, and returns results in order of relevance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_get(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): Enter a free-text query  Examples:  * `125, Berliner, berlin`  * `Beacon, Boston, Hospital`  * `Schnurrbart German Pub and Restaurant, Hong Kong`   _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results. 

        Keyword Args:
            at (str): Specify the center of the search context expressed as coordinates  Format: `{latitude},{longitude}`  Type: `{decimal},{decimal}`  Example: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)  The following constraints apply:   * One of \"at\", \"in=circle\" or \"in=bbox\" is required.   * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed. . [optional]
            _in (str): Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.  A geographic area can be   * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes     The country codes are to be provided in all uppercase.     Format: `countryCode:{countryCode}[,{countryCode}]*`     Examples:     * `countryCode:USA`     * `countryCode:CAN,MEX,USA`    * a circular area, provided as latitude, longitude, and radius (in meters)     Format: `circle:{latitude},{longitude};r={radius}`     Type: `circle:{decimal},{decimal};r={integer}`     Example: `circle:52.53,13.38;r=10000`    * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_     Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`     Example: `bbox:13.08836,52.33812,13.761,52.6755`   The following constraints apply:   * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.    * One of \"at\", \"in=circle\" or \"in=bbox\" is required.   * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\". . [optional]
            limit (int): Maximum number of results to be returned.. [optional] if omitted the server will use the default value of 20
            route (str): BETA: Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.  A `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),  followed by an optional width, represented by a sub-parameter \"w\".  Format: `{route};w={width}`  In regular expression syntax, the values of `route` look like:  `[a-zA-Z0-9_-]+(;w=\\d+)?`  \"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.  \"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.  Type: `{Flexible Polyline Encoding};w={integer}`  The following constraints apply:  * A `route` MUST NOT contain more than 2000 points.  Examples:  * `BFoz5xJ67i1B1B7PzIhaxL7Y`  * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`  * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`  Note: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:  ``` >>> import flexpolyline >>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC' >>> flexpolyline.decode(polyline) [(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0), (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0), (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)] ``` . [optional]
            lang ([str]): Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.. [optional]
            political_view (str): Toggle the political view.  This parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.  Currently the only supported political views are:  * RUS expressing the Russian view on Crimea  * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands  * MAR expressing the Moroccan view on Western Sahara  * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters  * KEN Kenya view on Ilemi Triangle  * TZA Tanzania view on Lake Malawi  * URY Uruguay view on Rincon de Artigas  For any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.  For not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.. [optional]
            show ([str]): Select additional fields to be rendered in the response. Please note that some of the fields involve additional webservice calls and can increase the overall response time.  The value is a comma-separated list of the sections to be enabled. For some sections there is a long and a short ID.  Description of accepted values:  'phonemes': Renders phonemes for address and place names into the results.  'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.  BETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.. [optional]
            x_request_id (str): Used to correlate requests with their responses within a customer's application, for logging and error reporting.  Format: Free string, but a valid UUIDv4 is recommended.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OpenSearchSearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['q'] = \
            q
        return self.discover_get_endpoint.call_with_http_info(**kwargs)

    def geocode_get(
        self,
        **kwargs
    ):
        """Geocode  # noqa: E501

        This endpoint allows to find the geo-coordinates of a known address, place, locality or administrative area, even if the query is incomplete or partly incorrect. It also returns a complete postal address string and address details. It supports structured, unstructured and hybrid queries - combinations of structured and unstructured query elements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geocode_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            at (str): Specify the center of the search context expressed as coordinates.  Format: `{latitude},{longitude}`  Type: `{decimal},{decimal}`  Example: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru) . [optional]
            _in (str): Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.  A geographic area can be   * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes     The country codes are to be provided in all uppercase.     Format: `countryCode:{countryCode}[,{countryCode}]*`     Examples:     * `countryCode:USA`     * `countryCode:CAN,MEX,USA`  . [optional]
            limit (int): Maximum number of results to be returned.. [optional] if omitted the server will use the default value of 20
            q (str): Enter a free-text query  Examples:  * `125, Berliner, berlin`  * `Beacon, Boston, Hospital`  * `Schnurrbart German Pub and Restaurant, Hong Kong`  _Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._ . [optional]
            qq (str): Enter a qualified query. A qualified query is similar to a free-text query, but in a structured manner.  It can take multiple _sub-parameters_, separated by semicolon, allowing to specify different aspects of a query.  Currently supported _sub-parameters_ are `country`, `state`, `county`, `city`, `district`, `street`,  `houseNumber`, and `postalCode`.  Format: `{sub-parameter}={string}[;{sub-parameter}={string}]*`  Examples:  * `city=Berlin;country=Germany;street=Friedrichstr;houseNumber=20`  * `city=Berlin;country=Germany`  * `postalCode=10969`  _Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._ . [optional]
            lang ([str]): Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.. [optional]
            political_view (str): Toggle the political view.  This parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.  Currently the only supported political views are:  * RUS expressing the Russian view on Crimea  * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands  * MAR expressing the Moroccan view on Western Sahara  * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters  * KEN Kenya view on Ilemi Triangle  * TZA Tanzania view on Lake Malawi  * URY Uruguay view on Rincon de Artigas  For any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.  For not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.. [optional]
            show ([str]): Select additional fields to be rendered in the response. Please note that some of the fields involve additional webservice calls and can increase the overall response time.  The value is a comma-separated list of the sections to be enabled. For some sections there is a long and a short ID.  Description of accepted values:  'countryInfo': For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.  'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.  BETA: 'parsing'  BETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.. [optional]
            x_request_id (str): Used to correlate requests with their responses within a customer's application, for logging and error reporting.  Format: Free string, but a valid UUIDv4 is recommended.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OpenSearchGeocodeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.geocode_get_endpoint.call_with_http_info(**kwargs)

    def lookup_get(
        self,
        id,
        **kwargs
    ):
        """Lookup By ID  # noqa: E501

        This endpoint looks up a known place by the HERE ID included in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lookup_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Location ID, which is the ID of a result item eg. of a Discover request

        Keyword Args:
            lang ([str]): Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.. [optional]
            political_view (str): Toggle the political view.  This parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.  Currently the only supported political views are:  * RUS expressing the Russian view on Crimea  * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands  * MAR expressing the Moroccan view on Western Sahara  * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters  * KEN Kenya view on Ilemi Triangle  * TZA Tanzania view on Lake Malawi  * URY Uruguay view on Rincon de Artigas  For any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.  For not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.. [optional]
            show ([str]): Select additional fields to be rendered in the response. Please note that some of the fields involve additional webservice calls and can increase the overall response time.  The value is a comma-separated list of the sections to be enabled. For some sections there is a long and a short ID.  Description of accepted values:  'countryInfo': For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.  'phonemes': Renders phonemes for address and place names into the results.  'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.  BETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.. [optional]
            x_request_id (str): Used to correlate requests with their responses within a customer's application, for logging and error reporting.  Format: Free string, but a valid UUIDv4 is recommended.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            LookupResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.lookup_get_endpoint.call_with_http_info(**kwargs)

    def revgeocode_get(
        self,
        **kwargs
    ):
        """Reverse Geocode  # noqa: E501

        This endpoint returns the nearest address to geo coordinates specified in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revgeocode_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            at (str): Specify the center of the search context expressed as coordinates.  Format: `{latitude},{longitude}`  Type: `{decimal},{decimal}`  Example: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)  The following constraints apply:   * Either \"at\" or \"in=circle\" is required.   * Parameters \"at\" and \"in=circle\" are mutually exclusive. Only one of them is allowed. . [optional]
            _in (str): Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.  A geographic area can be   * a circular area, provided as latitude, longitude, and radius (in meters)     Format: `circle:{latitude},{longitude};r={radius}`     Type: `circle:{decimal},{decimal};r={integer}`     Example: `circle:52.53,13.38;r=10000`   The following constraints apply:   * Either \"at\" or \"in=circle\" is required. . [optional]
            limit (int): Maximum number of results to be returned.. [optional] if omitted the server will use the default value of 1
            lang ([str]): Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.. [optional]
            political_view (str): Toggle the political view.  This parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.  Currently the only supported political views are:  * RUS expressing the Russian view on Crimea  * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands  * MAR expressing the Moroccan view on Western Sahara  * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters  * KEN Kenya view on Ilemi Triangle  * TZA Tanzania view on Lake Malawi  * URY Uruguay view on Rincon de Artigas  For any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.  For not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.. [optional]
            show ([str]): Select additional fields to be rendered in the response. Please note that some of the fields involve additional webservice calls and can increase the overall response time.  The value is a comma-separated list of the sections to be enabled. For some sections there is a long and a short ID.  Description of accepted values:  'countryInfo': For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.  'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.  BETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.. [optional]
            x_request_id (str): Used to correlate requests with their responses within a customer's application, for logging and error reporting.  Format: Free string, but a valid UUIDv4 is recommended.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OpenSearchReverseGeocodeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.revgeocode_get_endpoint.call_with_http_info(**kwargs)

