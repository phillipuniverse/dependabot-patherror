"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    The version of the OpenAPI document: 8.22.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from routing.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from routing.exceptions import ApiAttributeError


def lazy_import():
    from routing.model.base_action import BaseAction
    from routing.model.notice import Notice
    from routing.model.offset_action import OffsetAction
    from routing.model.passthrough import Passthrough
    from routing.model.pedestrian_action import PedestrianAction
    from routing.model.pedestrian_departure import PedestrianDeparture
    from routing.model.pedestrian_post_action import PedestrianPostAction
    from routing.model.pedestrian_span import PedestrianSpan
    from routing.model.pedestrian_transport import PedestrianTransport
    globals()['BaseAction'] = BaseAction
    globals()['Notice'] = Notice
    globals()['OffsetAction'] = OffsetAction
    globals()['Passthrough'] = Passthrough
    globals()['PedestrianAction'] = PedestrianAction
    globals()['PedestrianDeparture'] = PedestrianDeparture
    globals()['PedestrianPostAction'] = PedestrianPostAction
    globals()['PedestrianSpan'] = PedestrianSpan
    globals()['PedestrianTransport'] = PedestrianTransport


class PedestrianSection(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'departure': (PedestrianDeparture,),  # noqa: E501
            'arrival': (PedestrianDeparture,),  # noqa: E501
            'transport': (PedestrianTransport,),  # noqa: E501
            'pre_actions': ([BaseAction],),  # noqa: E501
            'actions': ([PedestrianAction],),  # noqa: E501
            'language': (str,),  # noqa: E501
            'post_actions': ([PedestrianPostAction],),  # noqa: E501
            'turn_by_turn_actions': ([OffsetAction],),  # noqa: E501
            'passthrough': ([Passthrough],),  # noqa: E501
            'summary': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'travel_summary': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'polyline': (str,),  # noqa: E501
            'notices': ([Notice],),  # noqa: E501
            'spans': ([PedestrianSpan],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'type': 'type',  # noqa: E501
        'departure': 'departure',  # noqa: E501
        'arrival': 'arrival',  # noqa: E501
        'transport': 'transport',  # noqa: E501
        'pre_actions': 'preActions',  # noqa: E501
        'actions': 'actions',  # noqa: E501
        'language': 'language',  # noqa: E501
        'post_actions': 'postActions',  # noqa: E501
        'turn_by_turn_actions': 'turnByTurnActions',  # noqa: E501
        'passthrough': 'passthrough',  # noqa: E501
        'summary': 'summary',  # noqa: E501
        'travel_summary': 'travelSummary',  # noqa: E501
        'polyline': 'polyline',  # noqa: E501
        'notices': 'notices',  # noqa: E501
        'spans': 'spans',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, type, departure, arrival, transport, *args, **kwargs):  # noqa: E501
        """PedestrianSection - a model defined in OpenAPI

        Args:
            id (str): Unique identifier of the section
            type (str): Section type used by the client to identify what extension to the BaseSection are available.
            departure (PedestrianDeparture):
            arrival (PedestrianDeparture):
            transport (PedestrianTransport):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            pre_actions ([BaseAction]): Actions that must be done prior to `departure`.. [optional]  # noqa: E501
            actions ([PedestrianAction]): Actions to be performed at or during a specific portion of a section.  Action offsets are the coordinate index in the polyline. . [optional]  # noqa: E501
            language (str): Language of the localized strings in the section, if any, in BCP47 format.. [optional]  # noqa: E501
            post_actions ([PedestrianPostAction]): Actions that must be done after `arrival`.. [optional]  # noqa: E501
            turn_by_turn_actions ([OffsetAction]): Actions for turn by turn guidance during the travel portion of the section, i.e., between `departure` and `arrival`.. [optional]  # noqa: E501
            passthrough ([Passthrough]): List of via waypoints this section is passing through.  Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a `Passthrough` in the response. It appears in the section that starts with the closest non-passthrough via specified before it or origin.  The passthrough vias appear in this list in the order they are traversed. They are traversed in the order they are specified in the request. . [optional]  # noqa: E501
            summary (bool, date, datetime, dict, float, int, list, str, none_type): Total value of key attributes (e.g. duration, length) summed up for the entire section, including `preActions`, `postActions`, and the travel portion of the section. . [optional]  # noqa: E501
            travel_summary (bool, date, datetime, dict, float, int, list, str, none_type): Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section, between `departure` and `arrival`. `preActions` and `postActions` are excluded. . [optional]  # noqa: E501
            polyline (str): Line string in [Flexible Polyline](https://github.com/heremaps/flexible-polyline) format.. [optional]  # noqa: E501
            notices ([Notice]): Contains a list of issues related to this section of the route.  Follows a list of possible notice codes:  * `simplePolyline`: An accurate polyline is not available for this section.   The returned polyline has been generated from departure and arrival places. . [optional]  # noqa: E501
            spans ([PedestrianSpan]): Spans attached to a `Section` describing pedestrian content. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.type = type
        self.departure = departure
        self.arrival = arrival
        self.transport = transport
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, type, departure, arrival, transport, *args, **kwargs):  # noqa: E501
        """PedestrianSection - a model defined in OpenAPI

        Args:
            id (str): Unique identifier of the section
            type (str): Section type used by the client to identify what extension to the BaseSection are available.
            departure (PedestrianDeparture):
            arrival (PedestrianDeparture):
            transport (PedestrianTransport):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            pre_actions ([BaseAction]): Actions that must be done prior to `departure`.. [optional]  # noqa: E501
            actions ([PedestrianAction]): Actions to be performed at or during a specific portion of a section.  Action offsets are the coordinate index in the polyline. . [optional]  # noqa: E501
            language (str): Language of the localized strings in the section, if any, in BCP47 format.. [optional]  # noqa: E501
            post_actions ([PedestrianPostAction]): Actions that must be done after `arrival`.. [optional]  # noqa: E501
            turn_by_turn_actions ([OffsetAction]): Actions for turn by turn guidance during the travel portion of the section, i.e., between `departure` and `arrival`.. [optional]  # noqa: E501
            passthrough ([Passthrough]): List of via waypoints this section is passing through.  Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a `Passthrough` in the response. It appears in the section that starts with the closest non-passthrough via specified before it or origin.  The passthrough vias appear in this list in the order they are traversed. They are traversed in the order they are specified in the request. . [optional]  # noqa: E501
            summary (bool, date, datetime, dict, float, int, list, str, none_type): Total value of key attributes (e.g. duration, length) summed up for the entire section, including `preActions`, `postActions`, and the travel portion of the section. . [optional]  # noqa: E501
            travel_summary (bool, date, datetime, dict, float, int, list, str, none_type): Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section, between `departure` and `arrival`. `preActions` and `postActions` are excluded. . [optional]  # noqa: E501
            polyline (str): Line string in [Flexible Polyline](https://github.com/heremaps/flexible-polyline) format.. [optional]  # noqa: E501
            notices ([Notice]): Contains a list of issues related to this section of the route.  Follows a list of possible notice codes:  * `simplePolyline`: An accurate polyline is not available for this section.   The returned polyline has been generated from departure and arrival places. . [optional]  # noqa: E501
            spans ([PedestrianSpan]): Spans attached to a `Section` describing pedestrian content. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.type = type
        self.departure = departure
        self.arrival = arrival
        self.transport = transport
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
