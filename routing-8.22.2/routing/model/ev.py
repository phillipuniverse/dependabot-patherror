"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    The version of the OpenAPI document: 8.22.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from routing.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from routing.exceptions import ApiAttributeError



class EV(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('ascent',): {
            'inclusive_minimum': 0,
        },
        ('descent',): {
            'inclusive_minimum': 0,
        },
        ('auxiliary_consumption',): {
            'inclusive_minimum': 0,
        },
        ('initial_charge',): {
            'inclusive_minimum': 0,
        },
        ('max_charge',): {
            'inclusive_minimum': 0,
        },
        ('max_charging_voltage',): {
            'inclusive_minimum': 0,
        },
        ('max_charging_current',): {
            'inclusive_minimum': 0,
        },
        ('max_charge_after_charging_station',): {
            'inclusive_minimum': 0,
        },
        ('min_charge_at_charging_station',): {
            'inclusive_minimum': 0,
        },
        ('min_charge_at_destination',): {
            'inclusive_minimum': 0,
        },
        ('charging_setup_duration',): {
            'inclusive_minimum': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'free_flow_speed_table': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'traffic_speed_table': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'ascent': (float,),  # noqa: E501
            'descent': (float,),  # noqa: E501
            'auxiliary_consumption': (float,),  # noqa: E501
            'initial_charge': (float,),  # noqa: E501
            'max_charge': (float,),  # noqa: E501
            'charging_curve': (str,),  # noqa: E501
            'connector_types': (str,),  # noqa: E501
            'max_charging_voltage': (float,),  # noqa: E501
            'max_charging_current': (float,),  # noqa: E501
            'max_charge_after_charging_station': (float,),  # noqa: E501
            'min_charge_at_charging_station': (float,),  # noqa: E501
            'min_charge_at_destination': (float,),  # noqa: E501
            'charging_setup_duration': (int,),  # noqa: E501
            'preferred_brands': (str,),  # noqa: E501
            'make_reachable': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'free_flow_speed_table': 'freeFlowSpeedTable',  # noqa: E501
        'traffic_speed_table': 'trafficSpeedTable',  # noqa: E501
        'ascent': 'ascent',  # noqa: E501
        'descent': 'descent',  # noqa: E501
        'auxiliary_consumption': 'auxiliaryConsumption',  # noqa: E501
        'initial_charge': 'initialCharge',  # noqa: E501
        'max_charge': 'maxCharge',  # noqa: E501
        'charging_curve': 'chargingCurve',  # noqa: E501
        'connector_types': 'connectorTypes',  # noqa: E501
        'max_charging_voltage': 'maxChargingVoltage',  # noqa: E501
        'max_charging_current': 'maxChargingCurrent',  # noqa: E501
        'max_charge_after_charging_station': 'maxChargeAfterChargingStation',  # noqa: E501
        'min_charge_at_charging_station': 'minChargeAtChargingStation',  # noqa: E501
        'min_charge_at_destination': 'minChargeAtDestination',  # noqa: E501
        'charging_setup_duration': 'chargingSetupDuration',  # noqa: E501
        'preferred_brands': 'preferredBrands',  # noqa: E501
        'make_reachable': 'makeReachable',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, free_flow_speed_table, *args, **kwargs):  # noqa: E501
        """EV - a model defined in OpenAPI

        Args:
            free_flow_speed_table (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            traffic_speed_table (bool, date, datetime, dict, float, int, list, str, none_type): Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.  See `freeFlowSpeedTable` for a description of the string format. . [optional]  # noqa: E501
            ascent (float): Rate of energy consumed per meter rise in elevation (in Wh/m, i.e., Watt-hours per meter). . [optional]  # noqa: E501
            descent (float): Rate of energy recovered per meter fall in elevation (in Wh/m, i.e., Watt-hours per meter). . [optional]  # noqa: E501
            auxiliary_consumption (float): Rate of energy (in Wh/s) consumed by the vehicle's auxiliary systems (e.g., air conditioning, lights). The value represents the number of Watt-hours consumed per second of travel. . [optional]  # noqa: E501
            initial_charge (float): Charge level of the vehicle's battery at the start of the route (in kWh). Value must be less than or equal to the value of `maxCharge`. . [optional]  # noqa: E501
            max_charge (float): Total capacity of the vehicle's battery (in kWh). . [optional]  # noqa: E501
            charging_curve (str): Function curve describing the maximum battery charging rate (in kW) at a given charge level (in kWh).  The format of the string is a comma-separated list of numbers, as follows:  ``` <CHARGE_0>,<RATE_0>,<CHARGE_1>,<RATE_1>,...,<RATE_N>,<CHARGE_N> ```  where charge values are strictly increasing, non-negative floating-point values in units of (kWh), and rate values are positive floating point values in units of (kW).  Charge values must cover the entire range of `[0, maxChargeAfterChargingStation`]. The charging curve is piecewise constant, e.g., for any charge in the range `[CHARGE_0, CHARGE_1)`, the value of the function is `RATE_0`. . [optional]  # noqa: E501
            connector_types (str): Comma-separated list of connector types that are compatible with the vehicle. If `makeReachable` is set to `true`, then only stations with any of these connector types will be evaluated as a potential charging stop. For stations with multiple compatible connectors, the charging time is based on the connector type with the highest power rating among them.  Currently supported connector types are:   * `iec62196Type1Combo`:  Type 1 Combo connector, commonly called \"SAE J1772\"   * `iec62196Type2Combo`:  Type 2 Combo connector, commonly called \"Mennekes\"   * `chademo`: CHAdeMO connector   * `tesla`: Tesla connector . [optional]  # noqa: E501
            max_charging_voltage (float): Maximum charging voltage supported by the vehicle's battery (in Volt). . [optional]  # noqa: E501
            max_charging_current (float): Maximum charging current supported by the vehicle's battery (in Ampere). . [optional]  # noqa: E501
            max_charge_after_charging_station (float): Maximum charge to which the battery should be charged at a charging station (in kWh). Value must be less than or equal to the value of `maxCharge`. . [optional]  # noqa: E501
            min_charge_at_charging_station (float): Minimum charge when arriving at a charging station (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`. . [optional]  # noqa: E501
            min_charge_at_destination (float): Minimum charge at the final route destination (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`. . [optional]  # noqa: E501
            charging_setup_duration (int): Time spent after arriving at a charging station, but before actually charging, e.g., time spent for payment processing (in seconds). . [optional]  # noqa: E501
            preferred_brands (str): Comma-separated list of charging station brands. If `makeReachable` is set to `true`, then charging stations from the specified brands will be preferred as potential charging stops, even if this makes travel time longer (up to 15 minutes per charging stop). . [optional]  # noqa: E501
            make_reachable (bool): When set to `true`, the router ensures that the calculated route is reachable within the given constraints (i.e., `minChargeAtChargingStation`, `minChargeAtDestination`). If necessary, charging stations are added to the route to achieve reachability.  The following conditions must be met in order to enable this option: * `transportMode=car` * `routingMode=fast` * No `avoid` options requested * No `exclude` options requested * No `speedCap` requested . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.free_flow_speed_table = free_flow_speed_table
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, free_flow_speed_table, *args, **kwargs):  # noqa: E501
        """EV - a model defined in OpenAPI

        Args:
            free_flow_speed_table (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            traffic_speed_table (bool, date, datetime, dict, float, int, list, str, none_type): Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.  See `freeFlowSpeedTable` for a description of the string format. . [optional]  # noqa: E501
            ascent (float): Rate of energy consumed per meter rise in elevation (in Wh/m, i.e., Watt-hours per meter). . [optional]  # noqa: E501
            descent (float): Rate of energy recovered per meter fall in elevation (in Wh/m, i.e., Watt-hours per meter). . [optional]  # noqa: E501
            auxiliary_consumption (float): Rate of energy (in Wh/s) consumed by the vehicle's auxiliary systems (e.g., air conditioning, lights). The value represents the number of Watt-hours consumed per second of travel. . [optional]  # noqa: E501
            initial_charge (float): Charge level of the vehicle's battery at the start of the route (in kWh). Value must be less than or equal to the value of `maxCharge`. . [optional]  # noqa: E501
            max_charge (float): Total capacity of the vehicle's battery (in kWh). . [optional]  # noqa: E501
            charging_curve (str): Function curve describing the maximum battery charging rate (in kW) at a given charge level (in kWh).  The format of the string is a comma-separated list of numbers, as follows:  ``` <CHARGE_0>,<RATE_0>,<CHARGE_1>,<RATE_1>,...,<RATE_N>,<CHARGE_N> ```  where charge values are strictly increasing, non-negative floating-point values in units of (kWh), and rate values are positive floating point values in units of (kW).  Charge values must cover the entire range of `[0, maxChargeAfterChargingStation`]. The charging curve is piecewise constant, e.g., for any charge in the range `[CHARGE_0, CHARGE_1)`, the value of the function is `RATE_0`. . [optional]  # noqa: E501
            connector_types (str): Comma-separated list of connector types that are compatible with the vehicle. If `makeReachable` is set to `true`, then only stations with any of these connector types will be evaluated as a potential charging stop. For stations with multiple compatible connectors, the charging time is based on the connector type with the highest power rating among them.  Currently supported connector types are:   * `iec62196Type1Combo`:  Type 1 Combo connector, commonly called \"SAE J1772\"   * `iec62196Type2Combo`:  Type 2 Combo connector, commonly called \"Mennekes\"   * `chademo`: CHAdeMO connector   * `tesla`: Tesla connector . [optional]  # noqa: E501
            max_charging_voltage (float): Maximum charging voltage supported by the vehicle's battery (in Volt). . [optional]  # noqa: E501
            max_charging_current (float): Maximum charging current supported by the vehicle's battery (in Ampere). . [optional]  # noqa: E501
            max_charge_after_charging_station (float): Maximum charge to which the battery should be charged at a charging station (in kWh). Value must be less than or equal to the value of `maxCharge`. . [optional]  # noqa: E501
            min_charge_at_charging_station (float): Minimum charge when arriving at a charging station (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`. . [optional]  # noqa: E501
            min_charge_at_destination (float): Minimum charge at the final route destination (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`. . [optional]  # noqa: E501
            charging_setup_duration (int): Time spent after arriving at a charging station, but before actually charging, e.g., time spent for payment processing (in seconds). . [optional]  # noqa: E501
            preferred_brands (str): Comma-separated list of charging station brands. If `makeReachable` is set to `true`, then charging stations from the specified brands will be preferred as potential charging stops, even if this makes travel time longer (up to 15 minutes per charging stop). . [optional]  # noqa: E501
            make_reachable (bool): When set to `true`, the router ensures that the calculated route is reachable within the given constraints (i.e., `minChargeAtChargingStation`, `minChargeAtDestination`). If necessary, charging stations are added to the route to achieve reachability.  The following conditions must be met in order to enable this option: * `transportMode=car` * `routingMode=fast` * No `avoid` options requested * No `exclude` options requested * No `speedCap` requested . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.free_flow_speed_table = free_flow_speed_table
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
